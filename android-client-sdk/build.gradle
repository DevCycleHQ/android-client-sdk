plugins {
    id 'idea'
    id 'signing'
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'de.mannodermaus.android-junit5'
    id "io.github.gradle-nexus.publish-plugin" apply(false)
}
group = "com.devcycle"
version = "2.0.0"


android {
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testBuildType "minified"

        consumerProguardFiles("proguard-rules.pro")

        //Will create field in buildconfig.java for use in code. 
        buildConfigField 'String', 'VERSION_NAME', "\"$version\""
    }

    namespace 'com.devcycle'

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // "minified" build type to be used for unit tests
        minified {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        disable 'NewApi'
        disable 'Deprecation'
    }

}

ext {
    PUBLISH_GROUP_ID = 'com.devcycle'
    PUBLISH_VERSION = version
    PUBLISH_ARTIFACT_ID = 'android-client-sdk'
    PUBLISH_DESCRIPTION = 'DevCycle Android SDK'
    PUBLISH_URL = 'https://github.com/DevCycleHQ/android-client-sdk'
    PUBLISH_LICENSE_NAME = 'MIT License'
    PUBLISH_LICENSE_URL = 'https://www.opensource.org/licenses/mit-license.php'
    PUBLISH_DEVELOPER_ID = 'SDK'
    PUBLISH_DEVELOPER_NAME = 'DevCycle SDK Group'
    PUBLISH_DEVELOPER_EMAIL = 'support@devcycle.com'
    PUBLISH_SCM_CONNECTION = 'scm:git:github.com/DevCycleHQ/android-client-sdk.git'
    PUBLISH_SCM_DEVELOPER_CONNECTION = 'scm:git:ssh://github.com/DevCycleHQ/android-client-sdk.git'
    PUBLISH_SCM_URL = 'https://github.com/DevCycleHQ/android-client-sdk'

    androidx_version = '1.8.0'
    retrofit_version = "2.9.0"
    swagger_annotations_version = '2.2.0'
    jackson_version = "2.13.5"
    jackson_kotlin_version = "2.13.5"
    //noinspection DuplicatePlatformClasses
    jackson_jparser_version = "2.13.5"
    gson_mapper_version = "2.8.6"
    coroutines_version = '1.6.2'
    kotlin_reflect_version = '1.7.0'

    junit_version = "5.8.2"
    mockito_core_version = '4.6.1'
    mockito_inline_version = '2.13.0'
    mockk_version = '1.12.4'
    hamcrest_version = "2.2"
    okhttp_version = "4.9.3"

    android_core_version = "2.1.0"
    androidx_junit_version = "1.1.3"
    espresso_core_version = "3.4.0"
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

dependencies {
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")

    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("com.squareup.retrofit2:converter-jackson:$retrofit_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("io.swagger.core.v3:swagger-annotations:$swagger_annotations_version")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_kotlin_version}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_jparser_version}") {
        exclude group:'org.json', module:'json'
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_reflect_version")
    implementation("androidx.core:core-ktx:$androidx_version")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junit_version")

    testImplementation("org.mockito:mockito-core:$mockito_core_version")
    testImplementation("org.mockito:mockito-inline:$mockito_inline_version")
    testImplementation("io.mockk:mockk:$mockk_version")
    testImplementation("org.hamcrest:hamcrest-library:$hamcrest_version")

    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version")
    testImplementation("com.squareup.retrofit2:retrofit-mock:$retrofit_version")
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttp_version")
    testImplementation("androidx.arch.core:core-testing:$android_core_version")

    testImplementation("org.json:json:20190722")

    androidTestImplementation("androidx.test.ext:junit:$androidx_junit_version")
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_core_version")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'DevCycle Android Client SDK'
                groupId = group
                artifactId = 'android-client-sdk'
                description = 'Client side SDK to interact with DevCycle.'
                url = 'https://devcycle.com'

                scm {
                    connection = 'scm:git:git://github.com/DevCycleHQ/android-client-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com:DevCycleHQ/android-client-sdk.git'
                    url = 'https://github.com/DevCycleHQ/android-client-sdk'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        id = 'devcycle'
                        name = 'DevCycle Engineering'
                        email = 'support@devcycle.com'
                        organization = 'DevCycle'
                    }
                }
            }
            afterEvaluate {
                from components.release
            }
        }
    }
}

signing {
    // The signing key needs to be an ascii armored key version of the binary gpg keyfile
    // encoded in base64 to preserver formatting when used in an environment variable
    def signingKey = base64Decode(findProperty("signingKey"))
    def signingKeyId = findProperty("signingKeyId")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications
}

static def base64Decode(encodedString){
    if(encodedString != null) {
        byte[] decoded = encodedString.decodeBase64()
        String decode = new String(decoded)
        return decode
    }
    return null;
}
if (project == rootProject) {
    nexusPublishing {
        // Utilizes the Gradle Nexus Publish Plugin: https://github.com/gradle-nexus/publish-plugin/
        // to publish, close and release repositories to Sonatype
        repositories {
            sonatype {
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
                username = findProperty("sonatypeUsername")
                password = findProperty("sonatypePassword")
            }
        }
    }
}
