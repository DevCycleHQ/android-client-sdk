plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id "com.vanniktech.maven.publish" version "0.30.0"
    id 'de.mannodermaus.android-junit5'
}
import com.vanniktech.maven.publish.SonatypeHost


group = "com.devcycle"
version = "2.2.2"

mavenPublishing {
    coordinates(group, "android-client-sdk", version)
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
    signAllPublications()
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 23
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testBuildType "minified"

        consumerProguardFiles("proguard-rules.pro")

        //Will create field in buildconfig.java for use in code.
        buildConfigField 'String', 'VERSION_NAME', "\"$version\""
    }

    namespace 'com.devcycle'

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        "release" {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        "debug" {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        // "minified" build type to be used for unit tests
        "minified" {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        disable 'NewApi'
        disable 'Deprecation'
    }
}

ext {
    GROUP='com.devcycle'
    POM_VERSION=version
    POM_ARTIFACT_ID='android-client-sdk'
    POM_NAME='DevCycle Android Client SDK'
    POM_DESCRIPTION='The DevCycle Android Client SDK uses our Client SDK APIs to perform all user segmentation and bucketing for the SDK, providing fast response times using our globally distributed edge workers all around the world.'
    POM_INCEPTION_YEAR=2022
    POM_URL='https://github.com/DevCycleHQ/android-client-sdk'
    repo='https://github.com/DevCycleHQ/android-client-sdk'

    POM_LICENSE_NAME='MIT License'
    POM_LICENSE_URL='https://www.opensource.org/licenses/mit-license.php'
    POM_LICENSE_DIST=repo

    POM_SCM_URL='https://github.com/DevCycleHQ/android-client-sdk'
    POM_SCM_CONNECTION='scm:git:ssh://github.com/DevCycleHQ/android-client-sdk.git'
    POM_SCM_DEV_CONNECTION='scm:git:ssh://github.com/DevCycleHQ/android-client-sdk.git'

    POM_DEVELOPER_ID='SDK'
    POM_DEVELOPER_NAME='DevCycle SDK Group'
    POM_DEVELOPER_URL='https://devcycle.com'

    androidx_version = '1.8.0'
    retrofit_version = "2.9.0"
    swagger_annotations_version = '2.2.21'
    jackson_version = "2.13.5"
    jackson_kotlin_version = "2.13.5"
    //noinspection DuplicatePlatformClasses
    jackson_jparser_version = "2.13.5"
    gson_mapper_version = "2.8.6"
    coroutines_version = '1.6.2'
    kotlin_reflect_version = '1.9.0'

    junit_version = "5.8.2"
    mockito_core_version = '4.6.1'
    mockito_inline_version = '2.13.0'
    mockk_version = '1.13.10'
    hamcrest_version = "2.2"
    okhttp_version = "4.9.3"
    okhttp_eventsource_version = "4.1.1"
    kotlin_version = '1.9.0'

    android_core_version = "2.2.0"
    androidx_junit_version = "1.1.3"
    espresso_core_version = "3.4.0"
}

dependencies {
    implementation("com.squareup.okhttp3:okhttp:$okhttp_version")
    implementation("com.launchdarkly:okhttp-eventsource:$okhttp_eventsource_version")

    implementation("com.squareup.retrofit2:retrofit:$retrofit_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("com.squareup.retrofit2:converter-jackson:$retrofit_version") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    implementation("io.swagger.core.v3:swagger-annotations:$swagger_annotations_version")
    implementation("com.fasterxml.jackson.core:jackson-databind:$jackson_version")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_kotlin_version}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_jparser_version}") {
        exclude group:'org.json', module:'json'
    }
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_reflect_version")
    implementation("androidx.core:core-ktx:$androidx_version")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$junit_version")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junit_version")

    testImplementation("org.mockito:mockito-core:$mockito_core_version")
    testImplementation("org.mockito:mockito-inline:$mockito_inline_version")
    testImplementation("io.mockk:mockk:$mockk_version")
    testImplementation("org.hamcrest:hamcrest-library:$hamcrest_version")

    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version")
    testImplementation("com.squareup.retrofit2:retrofit-mock:$retrofit_version")
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttp_version")
    testImplementation("androidx.arch.core:core-testing:$android_core_version")

    testImplementation("org.json:json:20190722")

    androidTestImplementation("androidx.test.ext:junit:$androidx_junit_version")
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_core_version")

}
