/*
 * DevCycle Client SDK API
 * Documents the DevCycle Client SDK API which powers bucketing and decisions for DevCycle's client SDKs.
 *
 * OpenAPI spec version: 1-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.devcycle.sdk.android.model

import io.swagger.v3.oas.annotations.media.Schema

class ErrorResponse {
    @Schema(required = true, description = "Error message")
    var message: String? = null

    @Schema(description = "Additional error information detailing the error reasoning")
    var data: Any? = null

    constructor(message: String?, data: Any?) {
        this.message = message
        this.data = data
    }

    constructor() {}

    class ErrorResponseBuilder internal constructor() {
        private var message: String? = null
        private var data: Any? = null
        fun message(message: String?): ErrorResponseBuilder {
            this.message = message
            return this
        }

        fun data(data: Any?): ErrorResponseBuilder {
            this.data = data
            return this
        }

        fun build(): ErrorResponse {
            return ErrorResponse(message, data)
        }

        override fun toString(): String {
            return "ErrorResponse.ErrorResponseBuilder(message=" + message + ", data=" + data + ")"
        }
    }

    override fun equals(o: Any?): Boolean {
        if (o == null) {
            return false
        }
        if (o !is ErrorResponse) {
            return false
        }
        val errorResponse = o
        return (message == errorResponse.message
                && data == errorResponse.data)
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + if (message == null) 0 else message.hashCode()
        result = prime * result + if (data == null) 0 else data.hashCode()
        return result
    }

    override fun toString(): String {
        return "ErrorResponse(message=" + message + ", data=" + data + ")"
    }

    companion object {
        fun builder(): ErrorResponseBuilder {
            return ErrorResponseBuilder()
        }
    }
}